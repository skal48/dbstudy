-- 1. LOCATION_ID가 1700인 부서에 근무하는 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME을 조회하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
  FROM DEPARTMENTS D INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 WHERE LOCATION_ID = 1700;

-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID AND
       LOCATION_ID = 1700;

-- 2. DEPARTMENT_NAME이 'Executive'인 부서에 근무하는 사원들의 EMPLOYEE_ID, FIRST_NAME을 조회하시오.
-- 1) ANSI
SELECT DEPARTMENT_NAME
     , EMPLOYEE_ID 
     , FIRST_NAME
  FROM DEPARTMENTS D INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 WHERE DEPARTMENT_NAME = 'Executive';


-- 2) 오라클
SELECT DEPARTMENT_NAME
     , EMPLOYEE_ID 
     , FIRST_NAME
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
   AND DEPARTMENT_NAME = 'Executive';


-- 3. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME, STREET_ADDRESS, CITY를 조회하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , STREET_ADDRESS
     , CITY
 FROM DEPARTMENTS D INNER JOIN LOCATIONS L 
    ON D.LOCATION_ID = L.LOCATION_ID INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;

-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , STREET_ADDRESS
     , CITY
  FROM DEPARTMENTS D, LOCATIONS L, EMPLOYEES E
 WHERE D.LOCATION_ID = L.LOCATION_ID 
   AND D.DEPARTMENT_ID = E.DEPARTMENT_ID;

-- 4. 부서별 DEPARTMENT_NAME과 사원 수와 평균 연봉을 조회하시오.
-- 1) ANSI
SELECT D.DEPARTMENT_NAME
     , COUNT(*)
     , AVG(E.SALARY)
 FROM DEPARTMENTS D INNER JOIN EMPLOYEES E 
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME ;


-- 2) 오라클
SELECT D.DEPARTMENT_NAME
     , COUNT(*)
     , AVG(E.SALARY)
  FROM DEPARTMENTS D, EMPLOYEES E 
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME ;


-- 5. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME을 조회하시오. 부서가 없는 사원의 부서명은 'None'으로 조회되도록 처리하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , NVL(DEPARTMENT_NAME, 'NONE') AS DEPARTMENT_NAME
  FROM DEPARTMENTS D RIGHT OUTER JOIN EMPLOYEES E 
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;
    
-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , NVL(DEPARTMENT_NAME, 'NONE') AS DEPARTMENT_NAME
  FROM DEPARTMENTS D, EMPLOYEES E 
 WHERE D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID;


-- 6. 모든 부서의 DEPARTMENT_NAME과 근무 중인 사원 수를 조회하시오. 근무하는 사원이 없으면 0으로 조회하시오.
-- 1) ANSI
SELECT DEPARTMENT_NAME
     , COUNT(EMPLOYEE_ID) 
  FROM DEPARTMENTS D LEFT OUTER JOIN EMPLOYEES E 
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
  GROUP BY DEPARTMENT_NAME;
     
-- 2) 오라클
SELECT DEPARTMENT_NAME
     , COUNT(EMPLOYEE_ID) 
  FROM DEPARTMENTS D, EMPLOYEES E 
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID(+)
  GROUP BY DEPARTMENT_NAME;    

-- 7. 모든 부서의 DEPARTMENT_ID, DEPARTMENT_NAME, STATE_PROVINCE, COUNTRY_NAME, REGION_NAME을 조회하시오.
-- 1) ANSI
SELECT DEPARTMENT_ID
     , DEPARTMENT_NAME
     , STATE_PROVINCE
     , COUNTRY_NAME
     , REGION_NAME
 FROM REGIONS R INNER JOIN COUNTRIES C
   ON R.REGION_ID = C.REGION_ID 
INNER JOIN LOCATIONS L
   ON C.COUNTRY_ID = L.COUNTRY_ID
INNER JOIN DEPARTMENTS D
   ON L.LOCATION_ID = D.LOCATION_ID;
   
-- 2) 오라클
SELECT DEPARTMENT_ID
     , DEPARTMENT_NAME
     , STATE_PROVINCE
     , COUNTRY_NAME
     , REGION_NAME
  FROM REGIONS R, COUNTRIES C, LOCATIONS L, DEPARTMENTS D
 WHERE R.REGION_ID = C.REGION_ID 
   AND C.COUNTRY_ID = L.COUNTRY_ID
   AND L.LOCATION_ID = D.LOCATION_ID;


-- 8. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MANAGER의 FIRST_NAME을 조회하시오. (SELF JOIN)
-- 1) ANSI
--FROM
--EMPLOYEES E : 사원테이블
--EMPLOYEES M : 상사테이블

--ON
--사원테이블의 매니저번호  = 상사테이블의 사원번호

-- 사원테이블 E(드리븐테이블)       |  상사테이블 M (드라이브테이블)
--                       FK             PK
--사원번호   이름    매니저 번호    | 사원번호     이름      매니저 번호 
-- 1        KIM         NULL        | 1             KIM         NULL
-- 2        LEE         1           | 2             LEE         1
-- 3        PARK        1           | 3             PARK        1

SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME --사원 정보
     , M.EMPLOYEE_ID, M.FIRST_NAME, M.LAST_NAME --상사정보
  FROM EMPLOYEES M RIGHT OUTER JOIN  EMPLOYEES E
  ON M.EMPLOYEE_ID = E.MANAGER_ID;

SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME --사원 정보
     , M.EMPLOYEE_ID, M.FIRST_NAME, M.LAST_NAME --상사정보
  FROM EMPLOYEES M , EMPLOYEES E
  WHERE M.EMPLOYEE_ID = E.MANAGER_ID(+);



SELECT R.EMPLOYEE_ID
     , R.FIRST_NAME                 --똑같은 테이블에 똑같은 칼럼이 있으니  별명을 꼭 붙여 주어야 하나보다 .
     , R.LAST_NAME
     , E.FIRST_NAME AS MANAGER_FIRST_NAME
  FROM  EMPLOYEES E LEFT OUTER JOIN EMPLOYEES R 
    ON  R.MANAGER_ID = E.EMPLOYEE_ID;    
  
-- 2) 오라클
SELECT E.EMPLOYEE_ID
     , E.FIRST_NAME                 
     , E.LAST_NAME
     , R.FIRST_NAME AS MANAGER_FIRST_NAME
  FROM EMPLOYEES E, EMPLOYEES R
 WHERE E.EMPLOYEE_ID = R.MANAGER_ID(+);    

-- 9. 각 사원 중에서 매니저보다 먼저 입사한 사원을 조회하시오. (SELF JOIN)
-- 1) ANSI
SELECT E.EMPLOYEE_ID
     , E.FIRST_NAME
     , E.HIRE_DATE AS 사원입사일
     , R.EMPLOYEE_ID
     , R.FIRST_NAME
     , R.HIRE_DATE AS 매니저입사일
  FROM EMPLOYEES E INNER JOIN EMPLOYEES R
    ON E.MANAGER_ID = R.EMPLOYEE_ID
 WHERE TO_DATE(E.HIRE_DATE, 'YY/MM/DD') < TO_DATE(R.HIRE_DATE, 'YY/MM/DD')
 ORDER BY E.EMPLOYEE_ID;

-- 2) 오라클



-- 10. 같은 부서에 근무하는 사원 중에서 나보다 SALARY가 높은 사원 정보를 조회하시오. (SELF JOIN)
-- 1) ANSI
SELECT E.*
  FROM EMPLOYEES E JOIN EMPLOYEES R
    ON E.DEPARTMENT_ID = R.DEPARTMENT_ID;
    
-- 2) 오라클